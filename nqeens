public class queensProblem {
	private int [][] chessTable;
	private int nQueens;
public queensProblem(int nQueens) {
	this.chessTable=new int [nQueens][nQueens];
	this.nQueens= nQueens;
}
public void solve() {
	if(setQueens(0)) {
	  printQueens();
	}else {
		System.out.println("no solution exists....");
	}
	
}
	private boolean setQueens(int colIndex) {
		if(colIndex==nQueens) {
			return true;
		}	
		for(int rowIndex=0; rowIndex<nQueens;rowIndex++) {
			if(placedValid(rowIndex ,colIndex)) {
				chessTable[rowIndex][colIndex]=1;
				if(setQueens(colIndex+1)) {
					return true;
				}
			chessTable[rowIndex][colIndex]=0;
			//backtracking
		}
		}
	return false;
}
	private boolean placedValid(int rowIndex, int colIndex) {
		for(int i = 0 ; i<colIndex;i++) {
			if(chessTable[rowIndex][i]==1) {
				return false;
			}
		}
		for(int i=rowIndex , j=colIndex; i>=0&&j>=0;--i,--j) {
			if(chessTable[i][j]==1) {
				return false;
			}
		
		}
		for(int i=rowIndex , j=colIndex ; i<chessTable.length&&j>=0;i++,j--) {
			if(chessTable[i][j]==1) {
		return false;
		}
		}
		return true;
	}
	private void printQueens() {
		for(int i=0 ; i<chessTable.length ; ++i) {
			for(int j=0 ; j<chessTable.length ; ++j ) {
				if(chessTable[i][j]==1) {
				System.out.print(" * ");
			}else {
				System.out.print(" - ");
			}
		}
			System.out.println();
	}
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int nQueens=6;
		queensProblem prob = new queensProblem(nQueens);
		prob.solve();

	}

}
